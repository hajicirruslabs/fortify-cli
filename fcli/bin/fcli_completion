#!/usr/bin/env bash
#
# fcli Bash Completion
# =======================
#
# Bash completion support for the `fcli` command,
# generated by [picocli](https://picocli.info/) version 4.7.0.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `fcli [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'fcli (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_fcli finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_fcli() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config clear" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config language" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lang" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config ssl" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config language list" ];    then _picocli_fcli_config_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config language ls" ];    then _picocli_fcli_config_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config language set" ];    then _picocli_fcli_config_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config language get" ];    then _picocli_fcli_config_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lang list" ];    then _picocli_fcli_config_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lang ls" ];    then _picocli_fcli_config_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lang set" ];    then _picocli_fcli_config_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lang get" ];    then _picocli_fcli_config_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy add" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy clear" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy delete" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy rm" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy list" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy ls" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy update" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config ssl truststore" ];    then _picocli_fcli_config_ssl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config ssl truststore clear" ];    then _picocli_fcli_config_ssl_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config ssl truststore get" ];    then _picocli_fcli_config_ssl_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config ssl truststore set" ];    then _picocli_fcli_config_ssl_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable definition" ];    then _picocli_fcli_config_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable def" ];    then _picocli_fcli_config_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable contents" ];    then _picocli_fcli_config_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable definition clear" ];    then _picocli_fcli_config_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable definition delete" ];    then _picocli_fcli_config_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable definition rm" ];    then _picocli_fcli_config_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable definition get" ];    then _picocli_fcli_config_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable definition list" ];    then _picocli_fcli_config_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable definition ls" ];    then _picocli_fcli_config_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable def clear" ];    then _picocli_fcli_config_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable def delete" ];    then _picocli_fcli_config_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable def rm" ];    then _picocli_fcli_config_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable def get" ];    then _picocli_fcli_config_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable def list" ];    then _picocli_fcli_config_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable def ls" ];    then _picocli_fcli_config_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable contents get" ];    then _picocli_fcli_config_variable_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable contents list" ];    then _picocli_fcli_config_variable_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config variable contents ls" ];    then _picocli_fcli_config_variable_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var definition" ];    then _picocli_fcli_config_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var def" ];    then _picocli_fcli_config_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var contents" ];    then _picocli_fcli_config_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var definition clear" ];    then _picocli_fcli_config_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var definition delete" ];    then _picocli_fcli_config_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var definition rm" ];    then _picocli_fcli_config_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var definition get" ];    then _picocli_fcli_config_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var definition list" ];    then _picocli_fcli_config_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var definition ls" ];    then _picocli_fcli_config_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var def clear" ];    then _picocli_fcli_config_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var def delete" ];    then _picocli_fcli_config_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var def rm" ];    then _picocli_fcli_config_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var def get" ];    then _picocli_fcli_config_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var def list" ];    then _picocli_fcli_config_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var def ls" ];    then _picocli_fcli_config_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var contents get" ];    then _picocli_fcli_config_var_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var contents list" ];    then _picocli_fcli_config_var_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config var contents ls" ];    then _picocli_fcli_config_var_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg clear" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg language" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg lang" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg ssl" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg language list" ];    then _picocli_fcli_cfg_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg language ls" ];    then _picocli_fcli_cfg_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg language set" ];    then _picocli_fcli_cfg_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg language get" ];    then _picocli_fcli_cfg_language; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg lang list" ];    then _picocli_fcli_cfg_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg lang ls" ];    then _picocli_fcli_cfg_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg lang set" ];    then _picocli_fcli_cfg_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg lang get" ];    then _picocli_fcli_cfg_lang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy add" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy clear" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy delete" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy rm" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy list" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy ls" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy update" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg ssl truststore" ];    then _picocli_fcli_cfg_ssl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg ssl truststore clear" ];    then _picocli_fcli_cfg_ssl_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg ssl truststore get" ];    then _picocli_fcli_cfg_ssl_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg ssl truststore set" ];    then _picocli_fcli_cfg_ssl_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable definition" ];    then _picocli_fcli_cfg_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable def" ];    then _picocli_fcli_cfg_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable contents" ];    then _picocli_fcli_cfg_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable definition clear" ];    then _picocli_fcli_cfg_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable definition delete" ];    then _picocli_fcli_cfg_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable definition rm" ];    then _picocli_fcli_cfg_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable definition get" ];    then _picocli_fcli_cfg_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable definition list" ];    then _picocli_fcli_cfg_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable definition ls" ];    then _picocli_fcli_cfg_variable_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable def clear" ];    then _picocli_fcli_cfg_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable def delete" ];    then _picocli_fcli_cfg_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable def rm" ];    then _picocli_fcli_cfg_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable def get" ];    then _picocli_fcli_cfg_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable def list" ];    then _picocli_fcli_cfg_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable def ls" ];    then _picocli_fcli_cfg_variable_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable contents get" ];    then _picocli_fcli_cfg_variable_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable contents list" ];    then _picocli_fcli_cfg_variable_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg variable contents ls" ];    then _picocli_fcli_cfg_variable_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var definition" ];    then _picocli_fcli_cfg_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var def" ];    then _picocli_fcli_cfg_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var contents" ];    then _picocli_fcli_cfg_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var definition clear" ];    then _picocli_fcli_cfg_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var definition delete" ];    then _picocli_fcli_cfg_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var definition rm" ];    then _picocli_fcli_cfg_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var definition get" ];    then _picocli_fcli_cfg_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var definition list" ];    then _picocli_fcli_cfg_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var definition ls" ];    then _picocli_fcli_cfg_var_definition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var def clear" ];    then _picocli_fcli_cfg_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var def delete" ];    then _picocli_fcli_cfg_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var def rm" ];    then _picocli_fcli_cfg_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var def get" ];    then _picocli_fcli_cfg_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var def list" ];    then _picocli_fcli_cfg_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var def ls" ];    then _picocli_fcli_cfg_var_def; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var contents get" ];    then _picocli_fcli_cfg_var_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var contents list" ];    then _picocli_fcli_cfg_var_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg var contents ls" ];    then _picocli_fcli_cfg_var_contents; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast session" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast rest" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scanner" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast session list" ];    then _picocli_fcli_scdast_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast session login" ];    then _picocli_fcli_scdast_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast session logout" ];    then _picocli_fcli_scdast_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast rest call" ];    then _picocli_fcli_scdast_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan complete" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan delete" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan rm" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan download" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan get" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan list" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan ls" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan pause" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan resume" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan retry" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan start" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan wait-for" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan retry import-results" ];    then _picocli_fcli_scdast_scan_retry; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan retry import-findings" ];    then _picocli_fcli_scdast_scan_retry; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy get" ];    then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy list" ];    then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy ls" ];    then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings get" ];    then _picocli_fcli_scdast_scansettings; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings list" ];    then _picocli_fcli_scdast_scansettings; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings ls" ];    then _picocli_fcli_scdast_scansettings; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor disable" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor enable" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor get" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor list" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor ls" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scanner disable" ];    then _picocli_fcli_scdast_scanner; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scanner enable" ];    then _picocli_fcli_scdast_scanner; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scanner get" ];    then _picocli_fcli_scdast_scanner; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scanner list" ];    then _picocli_fcli_scdast_scanner; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scanner ls" ];    then _picocli_fcli_scdast_scanner; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast session" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast rest" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast session list" ];    then _picocli_fcli_scsast_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast session login" ];    then _picocli_fcli_scsast_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast session logout" ];    then _picocli_fcli_scsast_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast rest call" ];    then _picocli_fcli_scsast_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan cancel" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan start" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan status" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan wait-for" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rest" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc activity-feed" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert-definition" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-attribute" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-user" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-filterset" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-view" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-vuln" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-vulnerabilities" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute-definition" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc user" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc event" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc job" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-permission" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-perm" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc seed-bundle" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token-definition" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session list" ];    then _picocli_fcli_ssc_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session login" ];    then _picocli_fcli_ssc_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session logout" ];    then _picocli_fcli_ssc_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rest call" ];    then _picocli_fcli_ssc_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc activity-feed list" ];    then _picocli_fcli_ssc_activityfeed; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc activity-feed ls" ];    then _picocli_fcli_ssc_activityfeed; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert-definition get" ];    then _picocli_fcli_ssc_alertdefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert-definition list" ];    then _picocli_fcli_ssc_alertdefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert-definition ls" ];    then _picocli_fcli_ssc_alertdefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert list" ];    then _picocli_fcli_ssc_alert; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert ls" ];    then _picocli_fcli_ssc_alert; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app delete" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app rm" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app get" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app list" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app ls" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app update" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion create" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion delete" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion rm" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion get" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion list" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion ls" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion update" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact approve" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact delete" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact rm" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact download" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact get" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact import" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact list" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact ls" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact purge" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact upload" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact wait-for" ];    then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact import debricked" ];    then _picocli_fcli_ssc_appversionartifact_import; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact purge by-id" ];    then _picocli_fcli_ssc_appversionartifact_purge; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-artifact purge by-date" ];    then _picocli_fcli_ssc_appversionartifact_purge; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-attribute list" ];    then _picocli_fcli_ssc_appversionattribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-attribute ls" ];    then _picocli_fcli_ssc_appversionattribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-attribute set" ];    then _picocli_fcli_ssc_appversionattribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-user add" ];    then _picocli_fcli_ssc_appversionuser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-user delete" ];    then _picocli_fcli_ssc_appversionuser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-user rm" ];    then _picocli_fcli_ssc_appversionuser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-user list" ];    then _picocli_fcli_ssc_appversionuser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-user ls" ];    then _picocli_fcli_ssc_appversionuser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-filterset get" ];    then _picocli_fcli_ssc_appversionfilterset; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-filterset list" ];    then _picocli_fcli_ssc_appversionfilterset; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-filterset ls" ];    then _picocli_fcli_ssc_appversionfilterset; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-view get" ];    then _picocli_fcli_ssc_appversionview; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-view list" ];    then _picocli_fcli_ssc_appversionview; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-view ls" ];    then _picocli_fcli_ssc_appversionview; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-vuln count" ];    then _picocli_fcli_ssc_appversionvuln; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion-vulnerabilities count" ];    then _picocli_fcli_ssc_appversionvulnerabilities; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute-definition get" ];    then _picocli_fcli_ssc_attributedefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute-definition list" ];    then _picocli_fcli_ssc_attributedefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute-definition ls" ];    then _picocli_fcli_ssc_attributedefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc user delete" ];    then _picocli_fcli_ssc_user; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc user rm" ];    then _picocli_fcli_ssc_user; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc user get" ];    then _picocli_fcli_ssc_user; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc user list" ];    then _picocli_fcli_ssc_user; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc user ls" ];    then _picocli_fcli_ssc_user; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc event list" ];    then _picocli_fcli_ssc_event; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc event ls" ];    then _picocli_fcli_ssc_event; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template create" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template delete" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template rm" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template download" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template get" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template list" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template ls" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue-template update" ];    then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc job cancel" ];    then _picocli_fcli_ssc_job; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc job get" ];    then _picocli_fcli_ssc_job; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc job list" ];    then _picocli_fcli_ssc_job; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc job ls" ];    then _picocli_fcli_ssc_job; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc job update" ];    then _picocli_fcli_ssc_job; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin install" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin uninstall" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin enable" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin disable" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin get" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin list" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin ls" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template create" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template list" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template ls" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template get" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template download" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template generate-answerFile" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template gen-answer" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template delete" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report-template rm" ];    then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ create" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ list" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ ls" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ get" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ download" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ generate-answerFile" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ gen-answer" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ delete" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rep-templ rm" ];    then _picocli_fcli_ssc_reptempl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role create" ];    then _picocli_fcli_ssc_role; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role delete" ];    then _picocli_fcli_ssc_role; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role rm" ];    then _picocli_fcli_ssc_role; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role get" ];    then _picocli_fcli_ssc_role; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role list" ];    then _picocli_fcli_ssc_role; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role ls" ];    then _picocli_fcli_ssc_role; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-permission get" ];    then _picocli_fcli_ssc_rolepermission; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-permission list" ];    then _picocli_fcli_ssc_rolepermission; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-permission ls" ];    then _picocli_fcli_ssc_rolepermission; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-perm get" ];    then _picocli_fcli_ssc_roleperm; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-perm list" ];    then _picocli_fcli_ssc_roleperm; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc role-perm ls" ];    then _picocli_fcli_ssc_roleperm; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc seed-bundle upload" ];    then _picocli_fcli_ssc_seedbundle; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token create" ];    then _picocli_fcli_ssc_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token list" ];    then _picocli_fcli_ssc_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token ls" ];    then _picocli_fcli_ssc_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token revoke" ];    then _picocli_fcli_ssc_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token update" ];    then _picocli_fcli_ssc_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token-definition list" ];    then _picocli_fcli_ssc_tokendefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc token-definition ls" ];    then _picocli_fcli_ssc_tokendefinition; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fortify-vulnerability-exporter" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader install" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader list" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader uninstall" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload install" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload list" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload uninstall" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client install" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client list" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client uninstall" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client install" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client list" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client uninstall" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter install" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter list" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter uninstall" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fortify-vulnerability-exporter install" ];    then _picocli_fcli_tool_fortifyvulnerabilityexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fortify-vulnerability-exporter list" ];    then _picocli_fcli_tool_fortifyvulnerabilityexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fortify-vulnerability-exporter uninstall" ];    then _picocli_fcli_tool_fortifyvulnerabilityexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util all-commands" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util auto-complete" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util all-commands list" ];    then _picocli_fcli_util_allcommands; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util all-commands ls" ];    then _picocli_fcli_util_allcommands; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util auto-complete generate" ];    then _picocli_fcli_util_autocomplete; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(config)
  local cmds1=(cfg)
  local cmds2=(sc-dast)
  local cmds3=(sc-sast)
  local cmds4=(ssc)
  local cmds5=(tool)
  local cmds6=(util)
  local cmds7=(config clear)
  local cmds8=(config language)
  local cmds9=(config lang)
  local cmds10=(config proxy)
  local cmds11=(config ssl)
  local cmds12=(config variable)
  local cmds13=(config var)
  local cmds14=(config language list)
  local cmds15=(config language ls)
  local cmds16=(config language set)
  local cmds17=(config language get)
  local cmds18=(config lang list)
  local cmds19=(config lang ls)
  local cmds20=(config lang set)
  local cmds21=(config lang get)
  local cmds22=(config proxy add)
  local cmds23=(config proxy clear)
  local cmds24=(config proxy delete)
  local cmds25=(config proxy rm)
  local cmds26=(config proxy list)
  local cmds27=(config proxy ls)
  local cmds28=(config proxy update)
  local cmds29=(config ssl truststore)
  local cmds30=(config ssl truststore clear)
  local cmds31=(config ssl truststore get)
  local cmds32=(config ssl truststore set)
  local cmds33=(config variable definition)
  local cmds34=(config variable def)
  local cmds35=(config variable contents)
  local cmds36=(config variable definition clear)
  local cmds37=(config variable definition delete)
  local cmds38=(config variable definition rm)
  local cmds39=(config variable definition get)
  local cmds40=(config variable definition list)
  local cmds41=(config variable definition ls)
  local cmds42=(config variable def clear)
  local cmds43=(config variable def delete)
  local cmds44=(config variable def rm)
  local cmds45=(config variable def get)
  local cmds46=(config variable def list)
  local cmds47=(config variable def ls)
  local cmds48=(config variable contents get)
  local cmds49=(config variable contents list)
  local cmds50=(config variable contents ls)
  local cmds51=(config var definition)
  local cmds52=(config var def)
  local cmds53=(config var contents)
  local cmds54=(config var definition clear)
  local cmds55=(config var definition delete)
  local cmds56=(config var definition rm)
  local cmds57=(config var definition get)
  local cmds58=(config var definition list)
  local cmds59=(config var definition ls)
  local cmds60=(config var def clear)
  local cmds61=(config var def delete)
  local cmds62=(config var def rm)
  local cmds63=(config var def get)
  local cmds64=(config var def list)
  local cmds65=(config var def ls)
  local cmds66=(config var contents get)
  local cmds67=(config var contents list)
  local cmds68=(config var contents ls)
  local cmds69=(cfg clear)
  local cmds70=(cfg language)
  local cmds71=(cfg lang)
  local cmds72=(cfg proxy)
  local cmds73=(cfg ssl)
  local cmds74=(cfg variable)
  local cmds75=(cfg var)
  local cmds76=(cfg language list)
  local cmds77=(cfg language ls)
  local cmds78=(cfg language set)
  local cmds79=(cfg language get)
  local cmds80=(cfg lang list)
  local cmds81=(cfg lang ls)
  local cmds82=(cfg lang set)
  local cmds83=(cfg lang get)
  local cmds84=(cfg proxy add)
  local cmds85=(cfg proxy clear)
  local cmds86=(cfg proxy delete)
  local cmds87=(cfg proxy rm)
  local cmds88=(cfg proxy list)
  local cmds89=(cfg proxy ls)
  local cmds90=(cfg proxy update)
  local cmds91=(cfg ssl truststore)
  local cmds92=(cfg ssl truststore clear)
  local cmds93=(cfg ssl truststore get)
  local cmds94=(cfg ssl truststore set)
  local cmds95=(cfg variable definition)
  local cmds96=(cfg variable def)
  local cmds97=(cfg variable contents)
  local cmds98=(cfg variable definition clear)
  local cmds99=(cfg variable definition delete)
  local cmds100=(cfg variable definition rm)
  local cmds101=(cfg variable definition get)
  local cmds102=(cfg variable definition list)
  local cmds103=(cfg variable definition ls)
  local cmds104=(cfg variable def clear)
  local cmds105=(cfg variable def delete)
  local cmds106=(cfg variable def rm)
  local cmds107=(cfg variable def get)
  local cmds108=(cfg variable def list)
  local cmds109=(cfg variable def ls)
  local cmds110=(cfg variable contents get)
  local cmds111=(cfg variable contents list)
  local cmds112=(cfg variable contents ls)
  local cmds113=(cfg var definition)
  local cmds114=(cfg var def)
  local cmds115=(cfg var contents)
  local cmds116=(cfg var definition clear)
  local cmds117=(cfg var definition delete)
  local cmds118=(cfg var definition rm)
  local cmds119=(cfg var definition get)
  local cmds120=(cfg var definition list)
  local cmds121=(cfg var definition ls)
  local cmds122=(cfg var def clear)
  local cmds123=(cfg var def delete)
  local cmds124=(cfg var def rm)
  local cmds125=(cfg var def get)
  local cmds126=(cfg var def list)
  local cmds127=(cfg var def ls)
  local cmds128=(cfg var contents get)
  local cmds129=(cfg var contents list)
  local cmds130=(cfg var contents ls)
  local cmds131=(sc-dast session)
  local cmds132=(sc-dast rest)
  local cmds133=(sc-dast scan)
  local cmds134=(sc-dast scan-policy)
  local cmds135=(sc-dast scan-settings)
  local cmds136=(sc-dast sensor)
  local cmds137=(sc-dast scanner)
  local cmds138=(sc-dast session list)
  local cmds139=(sc-dast session login)
  local cmds140=(sc-dast session logout)
  local cmds141=(sc-dast rest call)
  local cmds142=(sc-dast scan complete)
  local cmds143=(sc-dast scan delete)
  local cmds144=(sc-dast scan rm)
  local cmds145=(sc-dast scan download)
  local cmds146=(sc-dast scan get)
  local cmds147=(sc-dast scan list)
  local cmds148=(sc-dast scan ls)
  local cmds149=(sc-dast scan pause)
  local cmds150=(sc-dast scan resume)
  local cmds151=(sc-dast scan retry)
  local cmds152=(sc-dast scan start)
  local cmds153=(sc-dast scan wait-for)
  local cmds154=(sc-dast scan retry import-results)
  local cmds155=(sc-dast scan retry import-findings)
  local cmds156=(sc-dast scan-policy get)
  local cmds157=(sc-dast scan-policy list)
  local cmds158=(sc-dast scan-policy ls)
  local cmds159=(sc-dast scan-settings get)
  local cmds160=(sc-dast scan-settings list)
  local cmds161=(sc-dast scan-settings ls)
  local cmds162=(sc-dast sensor disable)
  local cmds163=(sc-dast sensor enable)
  local cmds164=(sc-dast sensor get)
  local cmds165=(sc-dast sensor list)
  local cmds166=(sc-dast sensor ls)
  local cmds167=(sc-dast scanner disable)
  local cmds168=(sc-dast scanner enable)
  local cmds169=(sc-dast scanner get)
  local cmds170=(sc-dast scanner list)
  local cmds171=(sc-dast scanner ls)
  local cmds172=(sc-sast session)
  local cmds173=(sc-sast rest)
  local cmds174=(sc-sast scan)
  local cmds175=(sc-sast session list)
  local cmds176=(sc-sast session login)
  local cmds177=(sc-sast session logout)
  local cmds178=(sc-sast rest call)
  local cmds179=(sc-sast scan cancel)
  local cmds180=(sc-sast scan start)
  local cmds181=(sc-sast scan status)
  local cmds182=(sc-sast scan wait-for)
  local cmds183=(ssc session)
  local cmds184=(ssc rest)
  local cmds185=(ssc activity-feed)
  local cmds186=(ssc alert-definition)
  local cmds187=(ssc alert)
  local cmds188=(ssc app)
  local cmds189=(ssc appversion)
  local cmds190=(ssc appversion-artifact)
  local cmds191=(ssc appversion-attribute)
  local cmds192=(ssc appversion-user)
  local cmds193=(ssc appversion-filterset)
  local cmds194=(ssc appversion-view)
  local cmds195=(ssc appversion-vuln)
  local cmds196=(ssc appversion-vulnerabilities)
  local cmds197=(ssc attribute-definition)
  local cmds198=(ssc user)
  local cmds199=(ssc event)
  local cmds200=(ssc issue-template)
  local cmds201=(ssc job)
  local cmds202=(ssc plugin)
  local cmds203=(ssc report-template)
  local cmds204=(ssc rep-templ)
  local cmds205=(ssc role)
  local cmds206=(ssc role-permission)
  local cmds207=(ssc role-perm)
  local cmds208=(ssc seed-bundle)
  local cmds209=(ssc token)
  local cmds210=(ssc token-definition)
  local cmds211=(ssc session list)
  local cmds212=(ssc session login)
  local cmds213=(ssc session logout)
  local cmds214=(ssc rest call)
  local cmds215=(ssc activity-feed list)
  local cmds216=(ssc activity-feed ls)
  local cmds217=(ssc alert-definition get)
  local cmds218=(ssc alert-definition list)
  local cmds219=(ssc alert-definition ls)
  local cmds220=(ssc alert list)
  local cmds221=(ssc alert ls)
  local cmds222=(ssc app delete)
  local cmds223=(ssc app rm)
  local cmds224=(ssc app get)
  local cmds225=(ssc app list)
  local cmds226=(ssc app ls)
  local cmds227=(ssc app update)
  local cmds228=(ssc appversion create)
  local cmds229=(ssc appversion delete)
  local cmds230=(ssc appversion rm)
  local cmds231=(ssc appversion get)
  local cmds232=(ssc appversion list)
  local cmds233=(ssc appversion ls)
  local cmds234=(ssc appversion update)
  local cmds235=(ssc appversion-artifact approve)
  local cmds236=(ssc appversion-artifact delete)
  local cmds237=(ssc appversion-artifact rm)
  local cmds238=(ssc appversion-artifact download)
  local cmds239=(ssc appversion-artifact get)
  local cmds240=(ssc appversion-artifact import)
  local cmds241=(ssc appversion-artifact list)
  local cmds242=(ssc appversion-artifact ls)
  local cmds243=(ssc appversion-artifact purge)
  local cmds244=(ssc appversion-artifact upload)
  local cmds245=(ssc appversion-artifact wait-for)
  local cmds246=(ssc appversion-artifact import debricked)
  local cmds247=(ssc appversion-artifact purge by-id)
  local cmds248=(ssc appversion-artifact purge by-date)
  local cmds249=(ssc appversion-attribute list)
  local cmds250=(ssc appversion-attribute ls)
  local cmds251=(ssc appversion-attribute set)
  local cmds252=(ssc appversion-user add)
  local cmds253=(ssc appversion-user delete)
  local cmds254=(ssc appversion-user rm)
  local cmds255=(ssc appversion-user list)
  local cmds256=(ssc appversion-user ls)
  local cmds257=(ssc appversion-filterset get)
  local cmds258=(ssc appversion-filterset list)
  local cmds259=(ssc appversion-filterset ls)
  local cmds260=(ssc appversion-view get)
  local cmds261=(ssc appversion-view list)
  local cmds262=(ssc appversion-view ls)
  local cmds263=(ssc appversion-vuln count)
  local cmds264=(ssc appversion-vulnerabilities count)
  local cmds265=(ssc attribute-definition get)
  local cmds266=(ssc attribute-definition list)
  local cmds267=(ssc attribute-definition ls)
  local cmds268=(ssc user delete)
  local cmds269=(ssc user rm)
  local cmds270=(ssc user get)
  local cmds271=(ssc user list)
  local cmds272=(ssc user ls)
  local cmds273=(ssc event list)
  local cmds274=(ssc event ls)
  local cmds275=(ssc issue-template create)
  local cmds276=(ssc issue-template delete)
  local cmds277=(ssc issue-template rm)
  local cmds278=(ssc issue-template download)
  local cmds279=(ssc issue-template get)
  local cmds280=(ssc issue-template list)
  local cmds281=(ssc issue-template ls)
  local cmds282=(ssc issue-template update)
  local cmds283=(ssc job cancel)
  local cmds284=(ssc job get)
  local cmds285=(ssc job list)
  local cmds286=(ssc job ls)
  local cmds287=(ssc job update)
  local cmds288=(ssc plugin install)
  local cmds289=(ssc plugin uninstall)
  local cmds290=(ssc plugin enable)
  local cmds291=(ssc plugin disable)
  local cmds292=(ssc plugin get)
  local cmds293=(ssc plugin list)
  local cmds294=(ssc plugin ls)
  local cmds295=(ssc report-template create)
  local cmds296=(ssc report-template list)
  local cmds297=(ssc report-template ls)
  local cmds298=(ssc report-template get)
  local cmds299=(ssc report-template download)
  local cmds300=(ssc report-template generate-answerFile)
  local cmds301=(ssc report-template gen-answer)
  local cmds302=(ssc report-template delete)
  local cmds303=(ssc report-template rm)
  local cmds304=(ssc rep-templ create)
  local cmds305=(ssc rep-templ list)
  local cmds306=(ssc rep-templ ls)
  local cmds307=(ssc rep-templ get)
  local cmds308=(ssc rep-templ download)
  local cmds309=(ssc rep-templ generate-answerFile)
  local cmds310=(ssc rep-templ gen-answer)
  local cmds311=(ssc rep-templ delete)
  local cmds312=(ssc rep-templ rm)
  local cmds313=(ssc role create)
  local cmds314=(ssc role delete)
  local cmds315=(ssc role rm)
  local cmds316=(ssc role get)
  local cmds317=(ssc role list)
  local cmds318=(ssc role ls)
  local cmds319=(ssc role-permission get)
  local cmds320=(ssc role-permission list)
  local cmds321=(ssc role-permission ls)
  local cmds322=(ssc role-perm get)
  local cmds323=(ssc role-perm list)
  local cmds324=(ssc role-perm ls)
  local cmds325=(ssc seed-bundle upload)
  local cmds326=(ssc token create)
  local cmds327=(ssc token list)
  local cmds328=(ssc token ls)
  local cmds329=(ssc token revoke)
  local cmds330=(ssc token update)
  local cmds331=(ssc token-definition list)
  local cmds332=(ssc token-definition ls)
  local cmds333=(tool fod-uploader)
  local cmds334=(tool fodupload)
  local cmds335=(tool sc-client)
  local cmds336=(tool scancentral-client)
  local cmds337=(tool vuln-exporter)
  local cmds338=(tool fortify-vulnerability-exporter)
  local cmds339=(tool fod-uploader install)
  local cmds340=(tool fod-uploader list)
  local cmds341=(tool fod-uploader uninstall)
  local cmds342=(tool fodupload install)
  local cmds343=(tool fodupload list)
  local cmds344=(tool fodupload uninstall)
  local cmds345=(tool sc-client install)
  local cmds346=(tool sc-client list)
  local cmds347=(tool sc-client uninstall)
  local cmds348=(tool scancentral-client install)
  local cmds349=(tool scancentral-client list)
  local cmds350=(tool scancentral-client uninstall)
  local cmds351=(tool vuln-exporter install)
  local cmds352=(tool vuln-exporter list)
  local cmds353=(tool vuln-exporter uninstall)
  local cmds354=(tool fortify-vulnerability-exporter install)
  local cmds355=(tool fortify-vulnerability-exporter list)
  local cmds356=(tool fortify-vulnerability-exporter uninstall)
  local cmds357=(util all-commands)
  local cmds358=(util auto-complete)
  local cmds359=(util all-commands list)
  local cmds360=(util all-commands ls)
  local cmds361=(util auto-complete generate)

  if CompWordsContainsArray "${cmds361[@]}"; then _picocli_fcli_util_autocomplete_generate; return $?; fi
  if CompWordsContainsArray "${cmds360[@]}"; then _picocli_fcli_util_allcommands_ls; return $?; fi
  if CompWordsContainsArray "${cmds359[@]}"; then _picocli_fcli_util_allcommands_list; return $?; fi
  if CompWordsContainsArray "${cmds358[@]}"; then _picocli_fcli_util_autocomplete; return $?; fi
  if CompWordsContainsArray "${cmds357[@]}"; then _picocli_fcli_util_allcommands; return $?; fi
  if CompWordsContainsArray "${cmds356[@]}"; then _picocli_fcli_tool_fortifyvulnerabilityexporter_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds355[@]}"; then _picocli_fcli_tool_fortifyvulnerabilityexporter_list; return $?; fi
  if CompWordsContainsArray "${cmds354[@]}"; then _picocli_fcli_tool_fortifyvulnerabilityexporter_install; return $?; fi
  if CompWordsContainsArray "${cmds353[@]}"; then _picocli_fcli_tool_vulnexporter_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds352[@]}"; then _picocli_fcli_tool_vulnexporter_list; return $?; fi
  if CompWordsContainsArray "${cmds351[@]}"; then _picocli_fcli_tool_vulnexporter_install; return $?; fi
  if CompWordsContainsArray "${cmds350[@]}"; then _picocli_fcli_tool_scancentralclient_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds349[@]}"; then _picocli_fcli_tool_scancentralclient_list; return $?; fi
  if CompWordsContainsArray "${cmds348[@]}"; then _picocli_fcli_tool_scancentralclient_install; return $?; fi
  if CompWordsContainsArray "${cmds347[@]}"; then _picocli_fcli_tool_scclient_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds346[@]}"; then _picocli_fcli_tool_scclient_list; return $?; fi
  if CompWordsContainsArray "${cmds345[@]}"; then _picocli_fcli_tool_scclient_install; return $?; fi
  if CompWordsContainsArray "${cmds344[@]}"; then _picocli_fcli_tool_fodupload_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds343[@]}"; then _picocli_fcli_tool_fodupload_list; return $?; fi
  if CompWordsContainsArray "${cmds342[@]}"; then _picocli_fcli_tool_fodupload_install; return $?; fi
  if CompWordsContainsArray "${cmds341[@]}"; then _picocli_fcli_tool_foduploader_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds340[@]}"; then _picocli_fcli_tool_foduploader_list; return $?; fi
  if CompWordsContainsArray "${cmds339[@]}"; then _picocli_fcli_tool_foduploader_install; return $?; fi
  if CompWordsContainsArray "${cmds338[@]}"; then _picocli_fcli_tool_fortifyvulnerabilityexporter; return $?; fi
  if CompWordsContainsArray "${cmds337[@]}"; then _picocli_fcli_tool_vulnexporter; return $?; fi
  if CompWordsContainsArray "${cmds336[@]}"; then _picocli_fcli_tool_scancentralclient; return $?; fi
  if CompWordsContainsArray "${cmds335[@]}"; then _picocli_fcli_tool_scclient; return $?; fi
  if CompWordsContainsArray "${cmds334[@]}"; then _picocli_fcli_tool_fodupload; return $?; fi
  if CompWordsContainsArray "${cmds333[@]}"; then _picocli_fcli_tool_foduploader; return $?; fi
  if CompWordsContainsArray "${cmds332[@]}"; then _picocli_fcli_ssc_tokendefinition_ls; return $?; fi
  if CompWordsContainsArray "${cmds331[@]}"; then _picocli_fcli_ssc_tokendefinition_list; return $?; fi
  if CompWordsContainsArray "${cmds330[@]}"; then _picocli_fcli_ssc_token_update; return $?; fi
  if CompWordsContainsArray "${cmds329[@]}"; then _picocli_fcli_ssc_token_revoke; return $?; fi
  if CompWordsContainsArray "${cmds328[@]}"; then _picocli_fcli_ssc_token_ls; return $?; fi
  if CompWordsContainsArray "${cmds327[@]}"; then _picocli_fcli_ssc_token_list; return $?; fi
  if CompWordsContainsArray "${cmds326[@]}"; then _picocli_fcli_ssc_token_create; return $?; fi
  if CompWordsContainsArray "${cmds325[@]}"; then _picocli_fcli_ssc_seedbundle_upload; return $?; fi
  if CompWordsContainsArray "${cmds324[@]}"; then _picocli_fcli_ssc_roleperm_ls; return $?; fi
  if CompWordsContainsArray "${cmds323[@]}"; then _picocli_fcli_ssc_roleperm_list; return $?; fi
  if CompWordsContainsArray "${cmds322[@]}"; then _picocli_fcli_ssc_roleperm_get; return $?; fi
  if CompWordsContainsArray "${cmds321[@]}"; then _picocli_fcli_ssc_rolepermission_ls; return $?; fi
  if CompWordsContainsArray "${cmds320[@]}"; then _picocli_fcli_ssc_rolepermission_list; return $?; fi
  if CompWordsContainsArray "${cmds319[@]}"; then _picocli_fcli_ssc_rolepermission_get; return $?; fi
  if CompWordsContainsArray "${cmds318[@]}"; then _picocli_fcli_ssc_role_ls; return $?; fi
  if CompWordsContainsArray "${cmds317[@]}"; then _picocli_fcli_ssc_role_list; return $?; fi
  if CompWordsContainsArray "${cmds316[@]}"; then _picocli_fcli_ssc_role_get; return $?; fi
  if CompWordsContainsArray "${cmds315[@]}"; then _picocli_fcli_ssc_role_rm; return $?; fi
  if CompWordsContainsArray "${cmds314[@]}"; then _picocli_fcli_ssc_role_delete; return $?; fi
  if CompWordsContainsArray "${cmds313[@]}"; then _picocli_fcli_ssc_role_create; return $?; fi
  if CompWordsContainsArray "${cmds312[@]}"; then _picocli_fcli_ssc_reptempl_rm; return $?; fi
  if CompWordsContainsArray "${cmds311[@]}"; then _picocli_fcli_ssc_reptempl_delete; return $?; fi
  if CompWordsContainsArray "${cmds310[@]}"; then _picocli_fcli_ssc_reptempl_genanswer; return $?; fi
  if CompWordsContainsArray "${cmds309[@]}"; then _picocli_fcli_ssc_reptempl_generateanswerFile; return $?; fi
  if CompWordsContainsArray "${cmds308[@]}"; then _picocli_fcli_ssc_reptempl_download; return $?; fi
  if CompWordsContainsArray "${cmds307[@]}"; then _picocli_fcli_ssc_reptempl_get; return $?; fi
  if CompWordsContainsArray "${cmds306[@]}"; then _picocli_fcli_ssc_reptempl_ls; return $?; fi
  if CompWordsContainsArray "${cmds305[@]}"; then _picocli_fcli_ssc_reptempl_list; return $?; fi
  if CompWordsContainsArray "${cmds304[@]}"; then _picocli_fcli_ssc_reptempl_create; return $?; fi
  if CompWordsContainsArray "${cmds303[@]}"; then _picocli_fcli_ssc_reporttemplate_rm; return $?; fi
  if CompWordsContainsArray "${cmds302[@]}"; then _picocli_fcli_ssc_reporttemplate_delete; return $?; fi
  if CompWordsContainsArray "${cmds301[@]}"; then _picocli_fcli_ssc_reporttemplate_genanswer; return $?; fi
  if CompWordsContainsArray "${cmds300[@]}"; then _picocli_fcli_ssc_reporttemplate_generateanswerFile; return $?; fi
  if CompWordsContainsArray "${cmds299[@]}"; then _picocli_fcli_ssc_reporttemplate_download; return $?; fi
  if CompWordsContainsArray "${cmds298[@]}"; then _picocli_fcli_ssc_reporttemplate_get; return $?; fi
  if CompWordsContainsArray "${cmds297[@]}"; then _picocli_fcli_ssc_reporttemplate_ls; return $?; fi
  if CompWordsContainsArray "${cmds296[@]}"; then _picocli_fcli_ssc_reporttemplate_list; return $?; fi
  if CompWordsContainsArray "${cmds295[@]}"; then _picocli_fcli_ssc_reporttemplate_create; return $?; fi
  if CompWordsContainsArray "${cmds294[@]}"; then _picocli_fcli_ssc_plugin_ls; return $?; fi
  if CompWordsContainsArray "${cmds293[@]}"; then _picocli_fcli_ssc_plugin_list; return $?; fi
  if CompWordsContainsArray "${cmds292[@]}"; then _picocli_fcli_ssc_plugin_get; return $?; fi
  if CompWordsContainsArray "${cmds291[@]}"; then _picocli_fcli_ssc_plugin_disable; return $?; fi
  if CompWordsContainsArray "${cmds290[@]}"; then _picocli_fcli_ssc_plugin_enable; return $?; fi
  if CompWordsContainsArray "${cmds289[@]}"; then _picocli_fcli_ssc_plugin_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds288[@]}"; then _picocli_fcli_ssc_plugin_install; return $?; fi
  if CompWordsContainsArray "${cmds287[@]}"; then _picocli_fcli_ssc_job_update; return $?; fi
  if CompWordsContainsArray "${cmds286[@]}"; then _picocli_fcli_ssc_job_ls; return $?; fi
  if CompWordsContainsArray "${cmds285[@]}"; then _picocli_fcli_ssc_job_list; return $?; fi
  if CompWordsContainsArray "${cmds284[@]}"; then _picocli_fcli_ssc_job_get; return $?; fi
  if CompWordsContainsArray "${cmds283[@]}"; then _picocli_fcli_ssc_job_cancel; return $?; fi
  if CompWordsContainsArray "${cmds282[@]}"; then _picocli_fcli_ssc_issuetemplate_update; return $?; fi
  if CompWordsContainsArray "${cmds281[@]}"; then _picocli_fcli_ssc_issuetemplate_ls; return $?; fi
  if CompWordsContainsArray "${cmds280[@]}"; then _picocli_fcli_ssc_issuetemplate_list; return $?; fi
  if CompWordsContainsArray "${cmds279[@]}"; then _picocli_fcli_ssc_issuetemplate_get; return $?; fi
  if CompWordsContainsArray "${cmds278[@]}"; then _picocli_fcli_ssc_issuetemplate_download; return $?; fi
  if CompWordsContainsArray "${cmds277[@]}"; then _picocli_fcli_ssc_issuetemplate_rm; return $?; fi
  if CompWordsContainsArray "${cmds276[@]}"; then _picocli_fcli_ssc_issuetemplate_delete; return $?; fi
  if CompWordsContainsArray "${cmds275[@]}"; then _picocli_fcli_ssc_issuetemplate_create; return $?; fi
  if CompWordsContainsArray "${cmds274[@]}"; then _picocli_fcli_ssc_event_ls; return $?; fi
  if CompWordsContainsArray "${cmds273[@]}"; then _picocli_fcli_ssc_event_list; return $?; fi
  if CompWordsContainsArray "${cmds272[@]}"; then _picocli_fcli_ssc_user_ls; return $?; fi
  if CompWordsContainsArray "${cmds271[@]}"; then _picocli_fcli_ssc_user_list; return $?; fi
  if CompWordsContainsArray "${cmds270[@]}"; then _picocli_fcli_ssc_user_get; return $?; fi
  if CompWordsContainsArray "${cmds269[@]}"; then _picocli_fcli_ssc_user_rm; return $?; fi
  if CompWordsContainsArray "${cmds268[@]}"; then _picocli_fcli_ssc_user_delete; return $?; fi
  if CompWordsContainsArray "${cmds267[@]}"; then _picocli_fcli_ssc_attributedefinition_ls; return $?; fi
  if CompWordsContainsArray "${cmds266[@]}"; then _picocli_fcli_ssc_attributedefinition_list; return $?; fi
  if CompWordsContainsArray "${cmds265[@]}"; then _picocli_fcli_ssc_attributedefinition_get; return $?; fi
  if CompWordsContainsArray "${cmds264[@]}"; then _picocli_fcli_ssc_appversionvulnerabilities_count; return $?; fi
  if CompWordsContainsArray "${cmds263[@]}"; then _picocli_fcli_ssc_appversionvuln_count; return $?; fi
  if CompWordsContainsArray "${cmds262[@]}"; then _picocli_fcli_ssc_appversionview_ls; return $?; fi
  if CompWordsContainsArray "${cmds261[@]}"; then _picocli_fcli_ssc_appversionview_list; return $?; fi
  if CompWordsContainsArray "${cmds260[@]}"; then _picocli_fcli_ssc_appversionview_get; return $?; fi
  if CompWordsContainsArray "${cmds259[@]}"; then _picocli_fcli_ssc_appversionfilterset_ls; return $?; fi
  if CompWordsContainsArray "${cmds258[@]}"; then _picocli_fcli_ssc_appversionfilterset_list; return $?; fi
  if CompWordsContainsArray "${cmds257[@]}"; then _picocli_fcli_ssc_appversionfilterset_get; return $?; fi
  if CompWordsContainsArray "${cmds256[@]}"; then _picocli_fcli_ssc_appversionuser_ls; return $?; fi
  if CompWordsContainsArray "${cmds255[@]}"; then _picocli_fcli_ssc_appversionuser_list; return $?; fi
  if CompWordsContainsArray "${cmds254[@]}"; then _picocli_fcli_ssc_appversionuser_rm; return $?; fi
  if CompWordsContainsArray "${cmds253[@]}"; then _picocli_fcli_ssc_appversionuser_delete; return $?; fi
  if CompWordsContainsArray "${cmds252[@]}"; then _picocli_fcli_ssc_appversionuser_add; return $?; fi
  if CompWordsContainsArray "${cmds251[@]}"; then _picocli_fcli_ssc_appversionattribute_set; return $?; fi
  if CompWordsContainsArray "${cmds250[@]}"; then _picocli_fcli_ssc_appversionattribute_ls; return $?; fi
  if CompWordsContainsArray "${cmds249[@]}"; then _picocli_fcli_ssc_appversionattribute_list; return $?; fi
  if CompWordsContainsArray "${cmds248[@]}"; then _picocli_fcli_ssc_appversionartifact_purge_bydate; return $?; fi
  if CompWordsContainsArray "${cmds247[@]}"; then _picocli_fcli_ssc_appversionartifact_purge_byid; return $?; fi
  if CompWordsContainsArray "${cmds246[@]}"; then _picocli_fcli_ssc_appversionartifact_import_debricked; return $?; fi
  if CompWordsContainsArray "${cmds245[@]}"; then _picocli_fcli_ssc_appversionartifact_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds244[@]}"; then _picocli_fcli_ssc_appversionartifact_upload; return $?; fi
  if CompWordsContainsArray "${cmds243[@]}"; then _picocli_fcli_ssc_appversionartifact_purge; return $?; fi
  if CompWordsContainsArray "${cmds242[@]}"; then _picocli_fcli_ssc_appversionartifact_ls; return $?; fi
  if CompWordsContainsArray "${cmds241[@]}"; then _picocli_fcli_ssc_appversionartifact_list; return $?; fi
  if CompWordsContainsArray "${cmds240[@]}"; then _picocli_fcli_ssc_appversionartifact_import; return $?; fi
  if CompWordsContainsArray "${cmds239[@]}"; then _picocli_fcli_ssc_appversionartifact_get; return $?; fi
  if CompWordsContainsArray "${cmds238[@]}"; then _picocli_fcli_ssc_appversionartifact_download; return $?; fi
  if CompWordsContainsArray "${cmds237[@]}"; then _picocli_fcli_ssc_appversionartifact_rm; return $?; fi
  if CompWordsContainsArray "${cmds236[@]}"; then _picocli_fcli_ssc_appversionartifact_delete; return $?; fi
  if CompWordsContainsArray "${cmds235[@]}"; then _picocli_fcli_ssc_appversionartifact_approve; return $?; fi
  if CompWordsContainsArray "${cmds234[@]}"; then _picocli_fcli_ssc_appversion_update; return $?; fi
  if CompWordsContainsArray "${cmds233[@]}"; then _picocli_fcli_ssc_appversion_ls; return $?; fi
  if CompWordsContainsArray "${cmds232[@]}"; then _picocli_fcli_ssc_appversion_list; return $?; fi
  if CompWordsContainsArray "${cmds231[@]}"; then _picocli_fcli_ssc_appversion_get; return $?; fi
  if CompWordsContainsArray "${cmds230[@]}"; then _picocli_fcli_ssc_appversion_rm; return $?; fi
  if CompWordsContainsArray "${cmds229[@]}"; then _picocli_fcli_ssc_appversion_delete; return $?; fi
  if CompWordsContainsArray "${cmds228[@]}"; then _picocli_fcli_ssc_appversion_create; return $?; fi
  if CompWordsContainsArray "${cmds227[@]}"; then _picocli_fcli_ssc_app_update; return $?; fi
  if CompWordsContainsArray "${cmds226[@]}"; then _picocli_fcli_ssc_app_ls; return $?; fi
  if CompWordsContainsArray "${cmds225[@]}"; then _picocli_fcli_ssc_app_list; return $?; fi
  if CompWordsContainsArray "${cmds224[@]}"; then _picocli_fcli_ssc_app_get; return $?; fi
  if CompWordsContainsArray "${cmds223[@]}"; then _picocli_fcli_ssc_app_rm; return $?; fi
  if CompWordsContainsArray "${cmds222[@]}"; then _picocli_fcli_ssc_app_delete; return $?; fi
  if CompWordsContainsArray "${cmds221[@]}"; then _picocli_fcli_ssc_alert_ls; return $?; fi
  if CompWordsContainsArray "${cmds220[@]}"; then _picocli_fcli_ssc_alert_list; return $?; fi
  if CompWordsContainsArray "${cmds219[@]}"; then _picocli_fcli_ssc_alertdefinition_ls; return $?; fi
  if CompWordsContainsArray "${cmds218[@]}"; then _picocli_fcli_ssc_alertdefinition_list; return $?; fi
  if CompWordsContainsArray "${cmds217[@]}"; then _picocli_fcli_ssc_alertdefinition_get; return $?; fi
  if CompWordsContainsArray "${cmds216[@]}"; then _picocli_fcli_ssc_activityfeed_ls; return $?; fi
  if CompWordsContainsArray "${cmds215[@]}"; then _picocli_fcli_ssc_activityfeed_list; return $?; fi
  if CompWordsContainsArray "${cmds214[@]}"; then _picocli_fcli_ssc_rest_call; return $?; fi
  if CompWordsContainsArray "${cmds213[@]}"; then _picocli_fcli_ssc_session_logout; return $?; fi
  if CompWordsContainsArray "${cmds212[@]}"; then _picocli_fcli_ssc_session_login; return $?; fi
  if CompWordsContainsArray "${cmds211[@]}"; then _picocli_fcli_ssc_session_list; return $?; fi
  if CompWordsContainsArray "${cmds210[@]}"; then _picocli_fcli_ssc_tokendefinition; return $?; fi
  if CompWordsContainsArray "${cmds209[@]}"; then _picocli_fcli_ssc_token; return $?; fi
  if CompWordsContainsArray "${cmds208[@]}"; then _picocli_fcli_ssc_seedbundle; return $?; fi
  if CompWordsContainsArray "${cmds207[@]}"; then _picocli_fcli_ssc_roleperm; return $?; fi
  if CompWordsContainsArray "${cmds206[@]}"; then _picocli_fcli_ssc_rolepermission; return $?; fi
  if CompWordsContainsArray "${cmds205[@]}"; then _picocli_fcli_ssc_role; return $?; fi
  if CompWordsContainsArray "${cmds204[@]}"; then _picocli_fcli_ssc_reptempl; return $?; fi
  if CompWordsContainsArray "${cmds203[@]}"; then _picocli_fcli_ssc_reporttemplate; return $?; fi
  if CompWordsContainsArray "${cmds202[@]}"; then _picocli_fcli_ssc_plugin; return $?; fi
  if CompWordsContainsArray "${cmds201[@]}"; then _picocli_fcli_ssc_job; return $?; fi
  if CompWordsContainsArray "${cmds200[@]}"; then _picocli_fcli_ssc_issuetemplate; return $?; fi
  if CompWordsContainsArray "${cmds199[@]}"; then _picocli_fcli_ssc_event; return $?; fi
  if CompWordsContainsArray "${cmds198[@]}"; then _picocli_fcli_ssc_user; return $?; fi
  if CompWordsContainsArray "${cmds197[@]}"; then _picocli_fcli_ssc_attributedefinition; return $?; fi
  if CompWordsContainsArray "${cmds196[@]}"; then _picocli_fcli_ssc_appversionvulnerabilities; return $?; fi
  if CompWordsContainsArray "${cmds195[@]}"; then _picocli_fcli_ssc_appversionvuln; return $?; fi
  if CompWordsContainsArray "${cmds194[@]}"; then _picocli_fcli_ssc_appversionview; return $?; fi
  if CompWordsContainsArray "${cmds193[@]}"; then _picocli_fcli_ssc_appversionfilterset; return $?; fi
  if CompWordsContainsArray "${cmds192[@]}"; then _picocli_fcli_ssc_appversionuser; return $?; fi
  if CompWordsContainsArray "${cmds191[@]}"; then _picocli_fcli_ssc_appversionattribute; return $?; fi
  if CompWordsContainsArray "${cmds190[@]}"; then _picocli_fcli_ssc_appversionartifact; return $?; fi
  if CompWordsContainsArray "${cmds189[@]}"; then _picocli_fcli_ssc_appversion; return $?; fi
  if CompWordsContainsArray "${cmds188[@]}"; then _picocli_fcli_ssc_app; return $?; fi
  if CompWordsContainsArray "${cmds187[@]}"; then _picocli_fcli_ssc_alert; return $?; fi
  if CompWordsContainsArray "${cmds186[@]}"; then _picocli_fcli_ssc_alertdefinition; return $?; fi
  if CompWordsContainsArray "${cmds185[@]}"; then _picocli_fcli_ssc_activityfeed; return $?; fi
  if CompWordsContainsArray "${cmds184[@]}"; then _picocli_fcli_ssc_rest; return $?; fi
  if CompWordsContainsArray "${cmds183[@]}"; then _picocli_fcli_ssc_session; return $?; fi
  if CompWordsContainsArray "${cmds182[@]}"; then _picocli_fcli_scsast_scan_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds181[@]}"; then _picocli_fcli_scsast_scan_status; return $?; fi
  if CompWordsContainsArray "${cmds180[@]}"; then _picocli_fcli_scsast_scan_start; return $?; fi
  if CompWordsContainsArray "${cmds179[@]}"; then _picocli_fcli_scsast_scan_cancel; return $?; fi
  if CompWordsContainsArray "${cmds178[@]}"; then _picocli_fcli_scsast_rest_call; return $?; fi
  if CompWordsContainsArray "${cmds177[@]}"; then _picocli_fcli_scsast_session_logout; return $?; fi
  if CompWordsContainsArray "${cmds176[@]}"; then _picocli_fcli_scsast_session_login; return $?; fi
  if CompWordsContainsArray "${cmds175[@]}"; then _picocli_fcli_scsast_session_list; return $?; fi
  if CompWordsContainsArray "${cmds174[@]}"; then _picocli_fcli_scsast_scan; return $?; fi
  if CompWordsContainsArray "${cmds173[@]}"; then _picocli_fcli_scsast_rest; return $?; fi
  if CompWordsContainsArray "${cmds172[@]}"; then _picocli_fcli_scsast_session; return $?; fi
  if CompWordsContainsArray "${cmds171[@]}"; then _picocli_fcli_scdast_scanner_ls; return $?; fi
  if CompWordsContainsArray "${cmds170[@]}"; then _picocli_fcli_scdast_scanner_list; return $?; fi
  if CompWordsContainsArray "${cmds169[@]}"; then _picocli_fcli_scdast_scanner_get; return $?; fi
  if CompWordsContainsArray "${cmds168[@]}"; then _picocli_fcli_scdast_scanner_enable; return $?; fi
  if CompWordsContainsArray "${cmds167[@]}"; then _picocli_fcli_scdast_scanner_disable; return $?; fi
  if CompWordsContainsArray "${cmds166[@]}"; then _picocli_fcli_scdast_sensor_ls; return $?; fi
  if CompWordsContainsArray "${cmds165[@]}"; then _picocli_fcli_scdast_sensor_list; return $?; fi
  if CompWordsContainsArray "${cmds164[@]}"; then _picocli_fcli_scdast_sensor_get; return $?; fi
  if CompWordsContainsArray "${cmds163[@]}"; then _picocli_fcli_scdast_sensor_enable; return $?; fi
  if CompWordsContainsArray "${cmds162[@]}"; then _picocli_fcli_scdast_sensor_disable; return $?; fi
  if CompWordsContainsArray "${cmds161[@]}"; then _picocli_fcli_scdast_scansettings_ls; return $?; fi
  if CompWordsContainsArray "${cmds160[@]}"; then _picocli_fcli_scdast_scansettings_list; return $?; fi
  if CompWordsContainsArray "${cmds159[@]}"; then _picocli_fcli_scdast_scansettings_get; return $?; fi
  if CompWordsContainsArray "${cmds158[@]}"; then _picocli_fcli_scdast_scanpolicy_ls; return $?; fi
  if CompWordsContainsArray "${cmds157[@]}"; then _picocli_fcli_scdast_scanpolicy_list; return $?; fi
  if CompWordsContainsArray "${cmds156[@]}"; then _picocli_fcli_scdast_scanpolicy_get; return $?; fi
  if CompWordsContainsArray "${cmds155[@]}"; then _picocli_fcli_scdast_scan_retry_importfindings; return $?; fi
  if CompWordsContainsArray "${cmds154[@]}"; then _picocli_fcli_scdast_scan_retry_importresults; return $?; fi
  if CompWordsContainsArray "${cmds153[@]}"; then _picocli_fcli_scdast_scan_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds152[@]}"; then _picocli_fcli_scdast_scan_start; return $?; fi
  if CompWordsContainsArray "${cmds151[@]}"; then _picocli_fcli_scdast_scan_retry; return $?; fi
  if CompWordsContainsArray "${cmds150[@]}"; then _picocli_fcli_scdast_scan_resume; return $?; fi
  if CompWordsContainsArray "${cmds149[@]}"; then _picocli_fcli_scdast_scan_pause; return $?; fi
  if CompWordsContainsArray "${cmds148[@]}"; then _picocli_fcli_scdast_scan_ls; return $?; fi
  if CompWordsContainsArray "${cmds147[@]}"; then _picocli_fcli_scdast_scan_list; return $?; fi
  if CompWordsContainsArray "${cmds146[@]}"; then _picocli_fcli_scdast_scan_get; return $?; fi
  if CompWordsContainsArray "${cmds145[@]}"; then _picocli_fcli_scdast_scan_download; return $?; fi
  if CompWordsContainsArray "${cmds144[@]}"; then _picocli_fcli_scdast_scan_rm; return $?; fi
  if CompWordsContainsArray "${cmds143[@]}"; then _picocli_fcli_scdast_scan_delete; return $?; fi
  if CompWordsContainsArray "${cmds142[@]}"; then _picocli_fcli_scdast_scan_complete; return $?; fi
  if CompWordsContainsArray "${cmds141[@]}"; then _picocli_fcli_scdast_rest_call; return $?; fi
  if CompWordsContainsArray "${cmds140[@]}"; then _picocli_fcli_scdast_session_logout; return $?; fi
  if CompWordsContainsArray "${cmds139[@]}"; then _picocli_fcli_scdast_session_login; return $?; fi
  if CompWordsContainsArray "${cmds138[@]}"; then _picocli_fcli_scdast_session_list; return $?; fi
  if CompWordsContainsArray "${cmds137[@]}"; then _picocli_fcli_scdast_scanner; return $?; fi
  if CompWordsContainsArray "${cmds136[@]}"; then _picocli_fcli_scdast_sensor; return $?; fi
  if CompWordsContainsArray "${cmds135[@]}"; then _picocli_fcli_scdast_scansettings; return $?; fi
  if CompWordsContainsArray "${cmds134[@]}"; then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if CompWordsContainsArray "${cmds133[@]}"; then _picocli_fcli_scdast_scan; return $?; fi
  if CompWordsContainsArray "${cmds132[@]}"; then _picocli_fcli_scdast_rest; return $?; fi
  if CompWordsContainsArray "${cmds131[@]}"; then _picocli_fcli_scdast_session; return $?; fi
  if CompWordsContainsArray "${cmds130[@]}"; then _picocli_fcli_cfg_var_contents_ls; return $?; fi
  if CompWordsContainsArray "${cmds129[@]}"; then _picocli_fcli_cfg_var_contents_list; return $?; fi
  if CompWordsContainsArray "${cmds128[@]}"; then _picocli_fcli_cfg_var_contents_get; return $?; fi
  if CompWordsContainsArray "${cmds127[@]}"; then _picocli_fcli_cfg_var_def_ls; return $?; fi
  if CompWordsContainsArray "${cmds126[@]}"; then _picocli_fcli_cfg_var_def_list; return $?; fi
  if CompWordsContainsArray "${cmds125[@]}"; then _picocli_fcli_cfg_var_def_get; return $?; fi
  if CompWordsContainsArray "${cmds124[@]}"; then _picocli_fcli_cfg_var_def_rm; return $?; fi
  if CompWordsContainsArray "${cmds123[@]}"; then _picocli_fcli_cfg_var_def_delete; return $?; fi
  if CompWordsContainsArray "${cmds122[@]}"; then _picocli_fcli_cfg_var_def_clear; return $?; fi
  if CompWordsContainsArray "${cmds121[@]}"; then _picocli_fcli_cfg_var_definition_ls; return $?; fi
  if CompWordsContainsArray "${cmds120[@]}"; then _picocli_fcli_cfg_var_definition_list; return $?; fi
  if CompWordsContainsArray "${cmds119[@]}"; then _picocli_fcli_cfg_var_definition_get; return $?; fi
  if CompWordsContainsArray "${cmds118[@]}"; then _picocli_fcli_cfg_var_definition_rm; return $?; fi
  if CompWordsContainsArray "${cmds117[@]}"; then _picocli_fcli_cfg_var_definition_delete; return $?; fi
  if CompWordsContainsArray "${cmds116[@]}"; then _picocli_fcli_cfg_var_definition_clear; return $?; fi
  if CompWordsContainsArray "${cmds115[@]}"; then _picocli_fcli_cfg_var_contents; return $?; fi
  if CompWordsContainsArray "${cmds114[@]}"; then _picocli_fcli_cfg_var_def; return $?; fi
  if CompWordsContainsArray "${cmds113[@]}"; then _picocli_fcli_cfg_var_definition; return $?; fi
  if CompWordsContainsArray "${cmds112[@]}"; then _picocli_fcli_cfg_variable_contents_ls; return $?; fi
  if CompWordsContainsArray "${cmds111[@]}"; then _picocli_fcli_cfg_variable_contents_list; return $?; fi
  if CompWordsContainsArray "${cmds110[@]}"; then _picocli_fcli_cfg_variable_contents_get; return $?; fi
  if CompWordsContainsArray "${cmds109[@]}"; then _picocli_fcli_cfg_variable_def_ls; return $?; fi
  if CompWordsContainsArray "${cmds108[@]}"; then _picocli_fcli_cfg_variable_def_list; return $?; fi
  if CompWordsContainsArray "${cmds107[@]}"; then _picocli_fcli_cfg_variable_def_get; return $?; fi
  if CompWordsContainsArray "${cmds106[@]}"; then _picocli_fcli_cfg_variable_def_rm; return $?; fi
  if CompWordsContainsArray "${cmds105[@]}"; then _picocli_fcli_cfg_variable_def_delete; return $?; fi
  if CompWordsContainsArray "${cmds104[@]}"; then _picocli_fcli_cfg_variable_def_clear; return $?; fi
  if CompWordsContainsArray "${cmds103[@]}"; then _picocli_fcli_cfg_variable_definition_ls; return $?; fi
  if CompWordsContainsArray "${cmds102[@]}"; then _picocli_fcli_cfg_variable_definition_list; return $?; fi
  if CompWordsContainsArray "${cmds101[@]}"; then _picocli_fcli_cfg_variable_definition_get; return $?; fi
  if CompWordsContainsArray "${cmds100[@]}"; then _picocli_fcli_cfg_variable_definition_rm; return $?; fi
  if CompWordsContainsArray "${cmds99[@]}"; then _picocli_fcli_cfg_variable_definition_delete; return $?; fi
  if CompWordsContainsArray "${cmds98[@]}"; then _picocli_fcli_cfg_variable_definition_clear; return $?; fi
  if CompWordsContainsArray "${cmds97[@]}"; then _picocli_fcli_cfg_variable_contents; return $?; fi
  if CompWordsContainsArray "${cmds96[@]}"; then _picocli_fcli_cfg_variable_def; return $?; fi
  if CompWordsContainsArray "${cmds95[@]}"; then _picocli_fcli_cfg_variable_definition; return $?; fi
  if CompWordsContainsArray "${cmds94[@]}"; then _picocli_fcli_cfg_ssl_truststore_set; return $?; fi
  if CompWordsContainsArray "${cmds93[@]}"; then _picocli_fcli_cfg_ssl_truststore_get; return $?; fi
  if CompWordsContainsArray "${cmds92[@]}"; then _picocli_fcli_cfg_ssl_truststore_clear; return $?; fi
  if CompWordsContainsArray "${cmds91[@]}"; then _picocli_fcli_cfg_ssl_truststore; return $?; fi
  if CompWordsContainsArray "${cmds90[@]}"; then _picocli_fcli_cfg_proxy_update; return $?; fi
  if CompWordsContainsArray "${cmds89[@]}"; then _picocli_fcli_cfg_proxy_ls; return $?; fi
  if CompWordsContainsArray "${cmds88[@]}"; then _picocli_fcli_cfg_proxy_list; return $?; fi
  if CompWordsContainsArray "${cmds87[@]}"; then _picocli_fcli_cfg_proxy_rm; return $?; fi
  if CompWordsContainsArray "${cmds86[@]}"; then _picocli_fcli_cfg_proxy_delete; return $?; fi
  if CompWordsContainsArray "${cmds85[@]}"; then _picocli_fcli_cfg_proxy_clear; return $?; fi
  if CompWordsContainsArray "${cmds84[@]}"; then _picocli_fcli_cfg_proxy_add; return $?; fi
  if CompWordsContainsArray "${cmds83[@]}"; then _picocli_fcli_cfg_lang_get; return $?; fi
  if CompWordsContainsArray "${cmds82[@]}"; then _picocli_fcli_cfg_lang_set; return $?; fi
  if CompWordsContainsArray "${cmds81[@]}"; then _picocli_fcli_cfg_lang_ls; return $?; fi
  if CompWordsContainsArray "${cmds80[@]}"; then _picocli_fcli_cfg_lang_list; return $?; fi
  if CompWordsContainsArray "${cmds79[@]}"; then _picocli_fcli_cfg_language_get; return $?; fi
  if CompWordsContainsArray "${cmds78[@]}"; then _picocli_fcli_cfg_language_set; return $?; fi
  if CompWordsContainsArray "${cmds77[@]}"; then _picocli_fcli_cfg_language_ls; return $?; fi
  if CompWordsContainsArray "${cmds76[@]}"; then _picocli_fcli_cfg_language_list; return $?; fi
  if CompWordsContainsArray "${cmds75[@]}"; then _picocli_fcli_cfg_var; return $?; fi
  if CompWordsContainsArray "${cmds74[@]}"; then _picocli_fcli_cfg_variable; return $?; fi
  if CompWordsContainsArray "${cmds73[@]}"; then _picocli_fcli_cfg_ssl; return $?; fi
  if CompWordsContainsArray "${cmds72[@]}"; then _picocli_fcli_cfg_proxy; return $?; fi
  if CompWordsContainsArray "${cmds71[@]}"; then _picocli_fcli_cfg_lang; return $?; fi
  if CompWordsContainsArray "${cmds70[@]}"; then _picocli_fcli_cfg_language; return $?; fi
  if CompWordsContainsArray "${cmds69[@]}"; then _picocli_fcli_cfg_clear; return $?; fi
  if CompWordsContainsArray "${cmds68[@]}"; then _picocli_fcli_config_var_contents_ls; return $?; fi
  if CompWordsContainsArray "${cmds67[@]}"; then _picocli_fcli_config_var_contents_list; return $?; fi
  if CompWordsContainsArray "${cmds66[@]}"; then _picocli_fcli_config_var_contents_get; return $?; fi
  if CompWordsContainsArray "${cmds65[@]}"; then _picocli_fcli_config_var_def_ls; return $?; fi
  if CompWordsContainsArray "${cmds64[@]}"; then _picocli_fcli_config_var_def_list; return $?; fi
  if CompWordsContainsArray "${cmds63[@]}"; then _picocli_fcli_config_var_def_get; return $?; fi
  if CompWordsContainsArray "${cmds62[@]}"; then _picocli_fcli_config_var_def_rm; return $?; fi
  if CompWordsContainsArray "${cmds61[@]}"; then _picocli_fcli_config_var_def_delete; return $?; fi
  if CompWordsContainsArray "${cmds60[@]}"; then _picocli_fcli_config_var_def_clear; return $?; fi
  if CompWordsContainsArray "${cmds59[@]}"; then _picocli_fcli_config_var_definition_ls; return $?; fi
  if CompWordsContainsArray "${cmds58[@]}"; then _picocli_fcli_config_var_definition_list; return $?; fi
  if CompWordsContainsArray "${cmds57[@]}"; then _picocli_fcli_config_var_definition_get; return $?; fi
  if CompWordsContainsArray "${cmds56[@]}"; then _picocli_fcli_config_var_definition_rm; return $?; fi
  if CompWordsContainsArray "${cmds55[@]}"; then _picocli_fcli_config_var_definition_delete; return $?; fi
  if CompWordsContainsArray "${cmds54[@]}"; then _picocli_fcli_config_var_definition_clear; return $?; fi
  if CompWordsContainsArray "${cmds53[@]}"; then _picocli_fcli_config_var_contents; return $?; fi
  if CompWordsContainsArray "${cmds52[@]}"; then _picocli_fcli_config_var_def; return $?; fi
  if CompWordsContainsArray "${cmds51[@]}"; then _picocli_fcli_config_var_definition; return $?; fi
  if CompWordsContainsArray "${cmds50[@]}"; then _picocli_fcli_config_variable_contents_ls; return $?; fi
  if CompWordsContainsArray "${cmds49[@]}"; then _picocli_fcli_config_variable_contents_list; return $?; fi
  if CompWordsContainsArray "${cmds48[@]}"; then _picocli_fcli_config_variable_contents_get; return $?; fi
  if CompWordsContainsArray "${cmds47[@]}"; then _picocli_fcli_config_variable_def_ls; return $?; fi
  if CompWordsContainsArray "${cmds46[@]}"; then _picocli_fcli_config_variable_def_list; return $?; fi
  if CompWordsContainsArray "${cmds45[@]}"; then _picocli_fcli_config_variable_def_get; return $?; fi
  if CompWordsContainsArray "${cmds44[@]}"; then _picocli_fcli_config_variable_def_rm; return $?; fi
  if CompWordsContainsArray "${cmds43[@]}"; then _picocli_fcli_config_variable_def_delete; return $?; fi
  if CompWordsContainsArray "${cmds42[@]}"; then _picocli_fcli_config_variable_def_clear; return $?; fi
  if CompWordsContainsArray "${cmds41[@]}"; then _picocli_fcli_config_variable_definition_ls; return $?; fi
  if CompWordsContainsArray "${cmds40[@]}"; then _picocli_fcli_config_variable_definition_list; return $?; fi
  if CompWordsContainsArray "${cmds39[@]}"; then _picocli_fcli_config_variable_definition_get; return $?; fi
  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_fcli_config_variable_definition_rm; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_fcli_config_variable_definition_delete; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_fcli_config_variable_definition_clear; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_fcli_config_variable_contents; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_fcli_config_variable_def; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_fcli_config_variable_definition; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_fcli_config_ssl_truststore_set; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_fcli_config_ssl_truststore_get; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_fcli_config_ssl_truststore_clear; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_fcli_config_ssl_truststore; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_fcli_config_proxy_update; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_fcli_config_proxy_ls; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_fcli_config_proxy_list; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_fcli_config_proxy_rm; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_fcli_config_proxy_delete; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_fcli_config_proxy_clear; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_fcli_config_proxy_add; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_fcli_config_lang_get; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_fcli_config_lang_set; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_fcli_config_lang_ls; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_fcli_config_lang_list; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_fcli_config_language_get; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_fcli_config_language_set; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_fcli_config_language_ls; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_fcli_config_language_list; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_fcli_config_var; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_fcli_config_variable; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_fcli_config_ssl; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_fcli_config_proxy; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_fcli_config_lang; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_fcli_config_language; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_fcli_config_clear; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_fcli_util; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_fcli_tool; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_fcli_ssc; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_fcli_scsast; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_fcli_scdast; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_fcli_cfg; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_fcli_config; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_fcli; return $?;
}

# Generates completions for the options and subcommands of the `fcli` command.
function _picocli_fcli() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="config cfg sc-dast sc-sast ssc tool util"
  local flag_opts="-h --help -V --version"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_fcli_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear language lang proxy ssl variable var"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cfg` subcommand.
function _picocli_fcli_cfg() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear language lang proxy ssl variable var"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sc-dast` subcommand.
function _picocli_fcli_scdast() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="session rest scan scan-policy scan-settings sensor scanner"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sc-sast` subcommand.
function _picocli_fcli_scsast() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="session rest scan"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ssc` subcommand.
function _picocli_fcli_ssc() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="session rest activity-feed alert-definition alert app appversion appversion-artifact appversion-attribute appversion-user appversion-filterset appversion-view appversion-vuln appversion-vulnerabilities attribute-definition user event issue-template job plugin report-template rep-templ role role-permission role-perm seed-bundle token token-definition"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `tool` subcommand.
function _picocli_fcli_tool() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="fod-uploader fodupload sc-client scancentral-client vuln-exporter fortify-vulnerability-exporter"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `util` subcommand.
function _picocli_fcli_util() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="all-commands auto-complete"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `language` subcommand.
function _picocli_fcli_config_language() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls set get"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lang` subcommand.
function _picocli_fcli_config_lang() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls set get"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `proxy` subcommand.
function _picocli_fcli_config_proxy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="add clear delete rm list ls update"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ssl` subcommand.
function _picocli_fcli_config_ssl() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="truststore"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `variable` subcommand.
function _picocli_fcli_config_variable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="definition def contents"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `var` subcommand.
function _picocli_fcli_config_var() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="definition def contents"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_language_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_language_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_config_language_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_language_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_lang_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_lang_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_config_lang_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_lang_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_fcli_config_proxy_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --name"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_proxy_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_proxy_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_proxy_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_proxy_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_proxy_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_config_proxy_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --proxy"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --proxy)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `truststore` subcommand.
function _picocli_fcli_config_ssl_truststore() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear get set"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_ssl_truststore_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_ssl_truststore_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_config_ssl_truststore_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -p --truststore-password -t --truststore-type"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -p|--truststore-password)
      return
      ;;
    -t|--truststore-type)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `definition` subcommand.
function _picocli_fcli_config_variable_definition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `def` subcommand.
function _picocli_fcli_config_variable_def() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contents` subcommand.
function _picocli_fcli_config_variable_contents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_variable_definition_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_variable_definition_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_variable_definition_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_variable_definition_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_variable_definition_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_variable_definition_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_variable_def_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_variable_def_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_variable_def_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_variable_def_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_variable_def_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_variable_def_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_variable_contents_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_variable_contents_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_variable_contents_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `definition` subcommand.
function _picocli_fcli_config_var_definition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `def` subcommand.
function _picocli_fcli_config_var_def() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contents` subcommand.
function _picocli_fcli_config_var_contents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_var_definition_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_var_definition_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_var_definition_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_var_definition_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_var_definition_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_var_definition_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_var_def_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_var_def_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_var_def_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_var_def_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_var_def_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_var_def_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_var_contents_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_var_contents_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_var_contents_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `language` subcommand.
function _picocli_fcli_cfg_language() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls set get"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lang` subcommand.
function _picocli_fcli_cfg_lang() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls set get"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `proxy` subcommand.
function _picocli_fcli_cfg_proxy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="add clear delete rm list ls update"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ssl` subcommand.
function _picocli_fcli_cfg_ssl() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="truststore"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `variable` subcommand.
function _picocli_fcli_cfg_variable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="definition def contents"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `var` subcommand.
function _picocli_fcli_cfg_var() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="definition def contents"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_language_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_language_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_cfg_language_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_language_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_lang_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_lang_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_cfg_lang_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_lang_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_fcli_cfg_proxy_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --name"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_proxy_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_proxy_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_proxy_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_proxy_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_proxy_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_cfg_proxy_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --proxy"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --proxy)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `truststore` subcommand.
function _picocli_fcli_cfg_ssl_truststore() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear get set"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_ssl_truststore_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_ssl_truststore_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_cfg_ssl_truststore_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -p --truststore-password -t --truststore-type"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -p|--truststore-password)
      return
      ;;
    -t|--truststore-type)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `definition` subcommand.
function _picocli_fcli_cfg_variable_definition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `def` subcommand.
function _picocli_fcli_cfg_variable_def() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contents` subcommand.
function _picocli_fcli_cfg_variable_contents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_variable_definition_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_variable_definition_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_variable_definition_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_variable_definition_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_variable_definition_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_variable_definition_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_variable_def_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_variable_def_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_variable_def_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_variable_def_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_variable_def_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_variable_def_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_variable_contents_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_variable_contents_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_variable_contents_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `definition` subcommand.
function _picocli_fcli_cfg_var_definition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `def` subcommand.
function _picocli_fcli_cfg_var_def() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contents` subcommand.
function _picocli_fcli_cfg_var_contents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_var_definition_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_var_definition_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_var_definition_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_var_definition_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_var_definition_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_var_definition_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_var_def_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_var_def_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_var_def_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_var_def_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_var_def_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_var_def_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_var_contents_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_var_contents_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_var_contents_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_fcli_scdast_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list login logout"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rest` subcommand.
function _picocli_fcli_scdast_rest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="call"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan` subcommand.
function _picocli_fcli_scdast_scan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="complete delete rm download get list ls pause resume retry start wait-for"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan-policy` subcommand.
function _picocli_fcli_scdast_scanpolicy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan-settings` subcommand.
function _picocli_fcli_scdast_scansettings() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sensor` subcommand.
function _picocli_fcli_scdast_sensor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="disable enable get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scanner` subcommand.
function _picocli_fcli_scdast_scanner() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="disable enable get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_session_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_fcli_scdast_session_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --ssc-url --ssc-user -u --ssc-password -p --expire-in --ssc-ci-token -t"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --ssc-url)
      return
      ;;
    --ssc-user|-u)
      return
      ;;
    --ssc-password|-p)
      return
      ;;
    --expire-in)
      return
      ;;
    --ssc-ci-token|-t)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logout` subcommand.
function _picocli_fcli_scdast_session_logout() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-revoke-token"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --ssc-user -u --ssc-password -p --expire-in"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --ssc-user|-u)
      return
      ;;
    --ssc-password|-p)
      return
      ;;
    --expire-in)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `call` subcommand.
function _picocli_fcli_scdast_rest_call() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --request -X --data -d --session"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --request|-X)
      return
      ;;
    --data|-d)
      return
      ;;
    --session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `complete` subcommand.
function _picocli_fcli_scdast_scan_complete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_scdast_scan_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_scdast_scan_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_scdast_scan_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --dest -t --type"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values
  local type_option_args="fpr logs results settings site-tree" # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--dest)
      return
      ;;
    -t|--type)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_scan_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_scan_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --search-text -t -a --started-after -b --started-before"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --search-text|-t)
      return
      ;;
    -a|--started-after)
      return
      ;;
    -b|--started-before)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_scan_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --search-text -t -a --started-after -b --started-before"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --search-text|-t)
      return
      ;;
    -a|--started-after)
      return
      ;;
    -b|--started-before)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pause` subcommand.
function _picocli_fcli_scdast_scan_pause() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `resume` subcommand.
function _picocli_fcli_scdast_scan_resume() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `retry` subcommand.
function _picocli_fcli_scdast_scan_retry() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="import-results import-findings"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_scdast_scan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -S --settings -P --policy --overrides-file --mode -M --start-url -U --login-macro -L"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values
  local scanMode_option_args="CrawlOnly CrawlAndAudit AuditOnly" # --mode values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -S|--settings)
      return
      ;;
    -P|--policy)
      return
      ;;
    --overrides-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --mode|-M)
      COMPREPLY=( $( compgen -W "${scanMode_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --start-url|-U)
      return
      ;;
    --login-macro|-L)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_scdast_scan_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-progress"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --while-all --while-any --while -w --until-all --until -u --until-any --session"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values
  local onUnknownStateRequested_option_args="ignore fail" # --on-unknown-state-requested values
  local onFailureState_option_args="wait terminate fail" # --on-failure-state values
  local onUnknownState_option_args="wait terminate fail" # --on-unknown-state values
  local onTimeout_option_args="terminate fail" # --on-timeout values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --on-unknown-state-requested)
      COMPREPLY=( $( compgen -W "${onUnknownStateRequested_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-failure-state)
      COMPREPLY=( $( compgen -W "${onFailureState_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-unknown-state)
      COMPREPLY=( $( compgen -W "${onUnknownState_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-timeout)
      COMPREPLY=( $( compgen -W "${onTimeout_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --while-all)
      return
      ;;
    --while-any|--while|-w)
      return
      ;;
    --until-all|--until|-u)
      return
      ;;
    --until-any)
      return
      ;;
    --session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import-results` subcommand.
function _picocli_fcli_scdast_scan_retry_importresults() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import-findings` subcommand.
function _picocli_fcli_scdast_scan_retry_importfindings() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_scanpolicy_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_scanpolicy_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_scanpolicy_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_scansettings_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_scansettings_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --search-text -t -a --modified-after -b --modified-before"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --search-text|-t)
      return
      ;;
    -a|--modified-after)
      return
      ;;
    -b|--modified-before)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_scansettings_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --search-text -t -a --modified-after -b --modified-before"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --search-text|-t)
      return
      ;;
    -a|--modified-after)
      return
      ;;
    -b|--modified-before)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `disable` subcommand.
function _picocli_fcli_scdast_sensor_disable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `enable` subcommand.
function _picocli_fcli_scdast_sensor_enable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_sensor_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_sensor_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_sensor_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `disable` subcommand.
function _picocli_fcli_scdast_scanner_disable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `enable` subcommand.
function _picocli_fcli_scdast_scanner_enable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_scanner_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_scanner_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_scanner_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_fcli_scsast_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list login logout"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rest` subcommand.
function _picocli_fcli_scsast_rest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="call"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan` subcommand.
function _picocli_fcli_scsast_scan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="cancel start status wait-for"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scsast_session_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_fcli_scsast_session_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --ssc-url --ssc-user -u --ssc-password -p --expire-in --ssc-ci-token -t --client-auth-token -c"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --ssc-url)
      return
      ;;
    --ssc-user|-u)
      return
      ;;
    --ssc-password|-p)
      return
      ;;
    --expire-in)
      return
      ;;
    --ssc-ci-token|-t)
      return
      ;;
    --client-auth-token|-c)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logout` subcommand.
function _picocli_fcli_scsast_session_logout() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-revoke-token"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --ssc-user -u --ssc-password -p --expire-in"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --ssc-user|-u)
      return
      ;;
    --ssc-password|-p)
      return
      ;;
    --expire-in)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `call` subcommand.
function _picocli_fcli_scsast_rest_call() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --request -X --data -d --session"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --request|-X)
      return
      ;;
    --data|-d)
      return
      ;;
    --session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_scsast_scan_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_scsast_scan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-upload"
  local arg_opts="--env-prefix --log-file --log-level --session -m --mbs-file --sensor-version -v -p --package-file -o --output --store --output-to-file --notify --delim --appversion --ssc-ci-token"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -m|--mbs-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --sensor-version|-v)
      return
      ;;
    -p|--package-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --notify)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
    --ssc-ci-token)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `status` subcommand.
function _picocli_fcli_scsast_scan_status() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_scsast_scan_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-progress"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --while-all --while-any --while -w --until-all --until -u --until-any --session -s --status-type"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values
  local onUnknownStateRequested_option_args="ignore fail" # --on-unknown-state-requested values
  local onFailureState_option_args="wait terminate fail" # --on-failure-state values
  local onUnknownState_option_args="wait terminate fail" # --on-unknown-state values
  local onTimeout_option_args="terminate fail" # --on-timeout values
  local waitType_option_args="scan upload processing" # --status-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --on-unknown-state-requested)
      COMPREPLY=( $( compgen -W "${onUnknownStateRequested_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-failure-state)
      COMPREPLY=( $( compgen -W "${onFailureState_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-unknown-state)
      COMPREPLY=( $( compgen -W "${onUnknownState_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-timeout)
      COMPREPLY=( $( compgen -W "${onTimeout_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --while-all)
      return
      ;;
    --while-any|--while|-w)
      return
      ;;
    --until-all|--until|-u)
      return
      ;;
    --until-any)
      return
      ;;
    --session)
      return
      ;;
    -s|--status-type)
      COMPREPLY=( $( compgen -W "${waitType_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_fcli_ssc_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list login logout"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rest` subcommand.
function _picocli_fcli_ssc_rest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="call"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `activity-feed` subcommand.
function _picocli_fcli_ssc_activityfeed() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `alert-definition` subcommand.
function _picocli_fcli_ssc_alertdefinition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `alert` subcommand.
function _picocli_fcli_ssc_alert() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `app` subcommand.
function _picocli_fcli_ssc_app() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="delete rm get list ls update"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion` subcommand.
function _picocli_fcli_ssc_appversion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create delete rm get list ls update"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion-artifact` subcommand.
function _picocli_fcli_ssc_appversionartifact() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="approve delete rm download get import list ls purge upload wait-for"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion-attribute` subcommand.
function _picocli_fcli_ssc_appversionattribute() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls set"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion-user` subcommand.
function _picocli_fcli_ssc_appversionuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="add delete rm list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion-filterset` subcommand.
function _picocli_fcli_ssc_appversionfilterset() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion-view` subcommand.
function _picocli_fcli_ssc_appversionview() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion-vuln` subcommand.
function _picocli_fcli_ssc_appversionvuln() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="count"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion-vulnerabilities` subcommand.
function _picocli_fcli_ssc_appversionvulnerabilities() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="count"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `attribute-definition` subcommand.
function _picocli_fcli_ssc_attributedefinition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `user` subcommand.
function _picocli_fcli_ssc_user() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `event` subcommand.
function _picocli_fcli_ssc_event() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `issue-template` subcommand.
function _picocli_fcli_ssc_issuetemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create delete rm download get list ls update"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `job` subcommand.
function _picocli_fcli_ssc_job() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="cancel get list ls update"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `plugin` subcommand.
function _picocli_fcli_ssc_plugin() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="install uninstall enable disable get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `report-template` subcommand.
function _picocli_fcli_ssc_reporttemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create list ls get download generate-answerFile gen-answer delete rm"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rep-templ` subcommand.
function _picocli_fcli_ssc_reptempl() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create list ls get download generate-answerFile gen-answer delete rm"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `role` subcommand.
function _picocli_fcli_ssc_role() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `role-permission` subcommand.
function _picocli_fcli_ssc_rolepermission() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `role-perm` subcommand.
function _picocli_fcli_ssc_roleperm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `seed-bundle` subcommand.
function _picocli_fcli_ssc_seedbundle() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="upload"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `token` subcommand.
function _picocli_fcli_ssc_token() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create list ls revoke update"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `token-definition` subcommand.
function _picocli_fcli_ssc_tokendefinition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_session_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_fcli_ssc_session_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --url --user -u --password -p --expire-in --token -t --ci-token"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --expire-in)
      return
      ;;
    --token|-t)
      return
      ;;
    --ci-token)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logout` subcommand.
function _picocli_fcli_ssc_session_logout() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-revoke-token"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --user -u --password -p"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `call` subcommand.
function _picocli_fcli_ssc_rest_call() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --request -X --data -d --session"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --request|-X)
      return
      ;;
    --data|-d)
      return
      ;;
    --session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_activityfeed_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_activityfeed_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_alertdefinition_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_alertdefinition_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_alertdefinition_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_alert_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_alert_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_app_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --delete-versions"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_app_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --delete-versions"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_app_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_app_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_app_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_app_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --name -n --description -d"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_appversion_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --active --auto-required-attrs --skip-if-exists"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --issue-template --attr --attribute --useradd --description -d"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --issue-template)
      return
      ;;
    --attr|--attribute)
      return
      ;;
    --useradd)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_appversion_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_appversion_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_appversion_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_appversion_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_appversion_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_appversion_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --issue-template --attr --attribute --useradd --userdel --name -n --description -d"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --issue-template)
      return
      ;;
    --attr|--attribute)
      return
      ;;
    --useradd)
      return
      ;;
    --userdel)
      return
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `approve` subcommand.
function _picocli_fcli_ssc_appversionartifact_approve() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -m --message"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -m|--message)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_appversionartifact_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_appversionartifact_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_ssc_appversionartifact_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-include-sources"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --dest --delim --appversion --id"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--dest)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
    --id)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_appversionartifact_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_ssc_appversionartifact_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="debricked"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_appversionartifact_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_appversionartifact_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `purge` subcommand.
function _picocli_fcli_ssc_appversionartifact_purge() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="by-id by-date"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload` subcommand.
function _picocli_fcli_ssc_appversionartifact_upload() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session --delim --appversion -o --output --store --output-to-file -e --engine-type"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -e|--engine-type)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "upload" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_ssc_appversionartifact_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-progress"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --while-all --while-any --while -w --until-all --until -u --until-any --session"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values
  local onUnknownStateRequested_option_args="ignore fail" # --on-unknown-state-requested values
  local onFailureState_option_args="wait terminate fail" # --on-failure-state values
  local onUnknownState_option_args="wait terminate fail" # --on-unknown-state values
  local onTimeout_option_args="terminate fail" # --on-timeout values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --on-unknown-state-requested)
      COMPREPLY=( $( compgen -W "${onUnknownStateRequested_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-failure-state)
      COMPREPLY=( $( compgen -W "${onFailureState_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-unknown-state)
      COMPREPLY=( $( compgen -W "${onUnknownState_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --on-timeout)
      COMPREPLY=( $( compgen -W "${onTimeout_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --while-all)
      return
      ;;
    --while-any|--while|-w)
      return
      ;;
    --until-all|--until|-u)
      return
      ;;
    --until-any)
      return
      ;;
    --session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `debricked` subcommand.
function _picocli_fcli_ssc_appversionartifact_import_debricked() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --session --delim --appversion -o --output --store --output-to-file --debricked-user -u --debricked-password -p --debricked-access-token -t -e --engine-type -f --save-sbom-as -r --repository -b --branch"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --debricked-user|-u)
      return
      ;;
    --debricked-password|-p)
      return
      ;;
    --debricked-access-token|-t)
      return
      ;;
    -e|--engine-type)
      return
      ;;
    -f|--save-sbom-as)
      return
      ;;
    -r|--repository)
      return
      ;;
    -b|--branch)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `by-id` subcommand.
function _picocli_fcli_ssc_appversionartifact_purge_byid() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `by-date` subcommand.
function _picocli_fcli_ssc_appversionartifact_purge_bydate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --appversion --older-than"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
    --older-than)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_appversionattribute_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_appversionattribute_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_ssc_appversionattribute_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_fcli_ssc_appversionuser_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_appversionuser_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_appversionuser_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_appversionuser_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_appversionuser_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_appversionfilterset_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_appversionfilterset_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_appversionfilterset_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_appversionview_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_appversionview_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_appversionview_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `count` subcommand.
function _picocli_fcli_ssc_appversionvuln_count() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion --by --filterset"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
    --by)
      return
      ;;
    --filterset)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `count` subcommand.
function _picocli_fcli_ssc_appversionvulnerabilities_count() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query --delim --appversion --by --filterset"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion)
      return
      ;;
    --by)
      return
      ;;
    --filterset)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_attributedefinition_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_attributedefinition_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_attributedefinition_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_user_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_user_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_user_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_user_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_user_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_event_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_event_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_issuetemplate_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --set-as-default"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --issue-template-file -f --description -d"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --issue-template-file|-f)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_issuetemplate_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_issuetemplate_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_ssc_issuetemplate_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --dest"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--dest)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_issuetemplate_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_issuetemplate_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_issuetemplate_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_issuetemplate_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --set-as-default"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --name -n --description -d"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_ssc_job_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_job_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_job_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_job_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_job_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file --priority"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --priority)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_ssc_plugin_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-auto-enable"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_ssc_plugin_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --no-auto-disable"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `enable` subcommand.
function _picocli_fcli_ssc_plugin_enable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `disable` subcommand.
function _picocli_fcli_ssc_plugin_disable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_plugin_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_plugin_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_plugin_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_reporttemplate_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --file -a --answer-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--file)
      return
      ;;
    -a|--answer-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_reporttemplate_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_reporttemplate_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_reporttemplate_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_ssc_reporttemplate_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --dest"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--dest)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate-answerFile` subcommand.
function _picocli_fcli_ssc_reporttemplate_generateanswerFile() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--force"
  local arg_opts="-f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -f)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `gen-answer` subcommand.
function _picocli_fcli_ssc_reporttemplate_genanswer() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--force"
  local arg_opts="-f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -f)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_reporttemplate_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_reporttemplate_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_reptempl_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --file -a --answer-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--file)
      return
      ;;
    -a|--answer-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_reptempl_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_reptempl_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_reptempl_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_ssc_reptempl_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -f --dest"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -f|--dest)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate-answerFile` subcommand.
function _picocli_fcli_ssc_reptempl_generateanswerFile() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--force"
  local arg_opts="-f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -f)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `gen-answer` subcommand.
function _picocli_fcli_ssc_reptempl_genanswer() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--force"
  local arg_opts="-f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -f)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_reptempl_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_reptempl_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_role_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --universal-access"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -d --description -p --permission-id"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -d|--description)
      return
      ;;
    -p|--permission-id)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_role_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_role_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_role_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_role_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_role_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_rolepermission_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_rolepermission_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_rolepermission_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_roleperm_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_roleperm_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_roleperm_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload` subcommand.
function _picocli_fcli_ssc_seedbundle_upload() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_token_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --session --url --user -u --password -p -o --output --store --output-to-file --expire-in --description"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --expire-in)
      return
      ;;
    --description)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_token_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --session --url --user -u --password -p -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_token_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --session --url --user -u --password -p -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `revoke` subcommand.
function _picocli_fcli_ssc_token_revoke() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --session --url --user -u --password -p -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_token_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --session --url --user -u --password -p -o --output --store --output-to-file --expire-in --description"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    --expire-in)
      return
      ;;
    --description)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_tokendefinition_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_tokendefinition_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level --session -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --session)
      return
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fod-uploader` subcommand.
function _picocli_fcli_tool_foduploader() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="install list uninstall"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fodupload` subcommand.
function _picocli_fcli_tool_fodupload() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="install list uninstall"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sc-client` subcommand.
function _picocli_fcli_tool_scclient() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="install list uninstall"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scancentral-client` subcommand.
function _picocli_fcli_tool_scancentralclient() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="install list uninstall"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `vuln-exporter` subcommand.
function _picocli_fcli_tool_vulnexporter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="install list uninstall"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fortify-vulnerability-exporter` subcommand.
function _picocli_fcli_tool_fortifyvulnerabilityexporter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="install list uninstall"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_foduploader_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --replace-existing"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -d --install-dir"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -d|--install-dir)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_foduploader_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_foduploader_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm-uninstall"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_fodupload_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --replace-existing"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -d --install-dir"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -d|--install-dir)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_fodupload_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_fodupload_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm-uninstall"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_scclient_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --replace-existing"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -d --install-dir -t --client-auth-token"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -d|--install-dir)
      return
      ;;
    -t|--client-auth-token)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_scclient_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_scclient_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm-uninstall"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_scancentralclient_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --replace-existing"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -d --install-dir -t --client-auth-token"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -d|--install-dir)
      return
      ;;
    -t|--client-auth-token)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_scancentralclient_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_scancentralclient_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm-uninstall"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_vulnexporter_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --replace-existing"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -d --install-dir"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -d|--install-dir)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_vulnexporter_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_vulnexporter_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm-uninstall"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_fortifyvulnerabilityexporter_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --replace-existing"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -d --install-dir"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -d|--install-dir)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_fortifyvulnerabilityexporter_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_fortifyvulnerabilityexporter_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -y --confirm-uninstall"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `all-commands` subcommand.
function _picocli_fcli_util_allcommands() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `auto-complete` subcommand.
function _picocli_fcli_util_autocomplete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="generate"
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_util_allcommands_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --include-hidden --include-parents"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_util_allcommands_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --include-hidden --include-parents"
  local arg_opts="--env-prefix --log-file --log-level -o --output --store --output-to-file -q --query"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values
  local formatoptions_option_args="csv csv-plain json json-flat table table-plain tree tree-flat xml xml-flat yaml yaml-flat expr json-properties" # --output values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output)
      COMPREPLY=( $( compgen -W "${formatoptions_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --output-to-file)
      return
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate` subcommand.
function _picocli_fcli_util_autocomplete_generate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--env-prefix --log-file --log-level"
  local logLevel_option_args="TRACE DEBUG INFO WARN ERROR" # --log-level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      return
      ;;
    --log-level)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `fcli`, `fcli.sh`, and `fcli.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_fcli` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_fcli -o default fcli fcli.sh fcli.bash
